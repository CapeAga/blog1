// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 管理员用户模型
model AdminUser {
  id       String @id @default(uuid())
  username String @unique
  password String
}

model User {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]
  profile   Profile?
}

model Profile {
  id       String  @id @default(uuid())
  bio      String?
  avatar   String?
  userId   String  @unique
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id            String         @id @default(uuid())
  title         String
  slug          String         @unique
  content       String
  excerpt       String?
  status        PostStatus     @default(DRAFT)
  publishedAt   DateTime?
  featuredImage String?
  authorId      String
  author        User           @relation(fields: [authorId], references: [id])
  categoryId    String?
  category      Category?      @relation(fields: [categoryId], references: [id])
  tags          TagsOnPosts[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Category {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  description String?
  posts       Post[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Tag {
  id          String        @id @default(uuid())
  name        String
  slug        String        @unique
  description String?
  posts       TagsOnPosts[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model TagsOnPosts {
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  tagId     String
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([postId, tagId])
}

model AITool {
  id          String    @id @default(uuid())
  name        String
  slug        String    @unique
  description String
  url         String
  imageUrl    String?
  category    String?
  free        Boolean   @default(true)
  featured    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum PostStatus {
  DRAFT
  PUBLISHED
}
